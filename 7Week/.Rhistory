#변수들 중요도
model = train(x,
y,
'nb',
trControl=trainControl(method='cv',number=10),
tuneGrid=grid
)
model
#Model Evaluation
#Predict testing set
Predict <- predict(model,newdata = ts_set)
Predict
#Get the confusion matrix to see accuracy value and other parameter values
confusionMatrix(Predict, ts_set$deposit)
#Plot Variable performance
X <- varImp(model) # Variable importance - RF
X
plot(X)
X
plot(X)
dev.off()
plot(X)
model
#Plot Variable performance
X <- varImp(model) # Variable importance - RF
X
#-------------------------------------------------------------------------------------
#cor값이 가장 높은 변수 2개로 테스트 campaign previous
head(x)
xtest <- cbind(x[1],x[6],x[10],x[12],x[13],x[14])
head(xtest)
y = tr_set$deposit
# optimize model
modelLookup("nb")
# optimization
model = train(xtest,
y,
'nb',
trControl=trainControl(method='cv',number=10),
tuneGrid=grid
)
model
#Plot Variable performance
X <- varImp(model) # Variable importance - RF
X
plot(X)
#randomForest로 변수 중요도보기 수치형 변수 X
library(randomForest)
model_rf <- randomForest(deposit~.,tr_set)
randomForest::importance(model_rf)
randomForest::varImpPlot(model_rf)
for (i in 0:length(data$age)){
data$age[i] = (data$age[i]-41.23) / (11.91)
}
for (i in 0:length(data$balance)){
data$balance[i] = (data$balance[i]-1528.54) / (3225.41)
}
for (i in 0:length(data$campaign)){
data$campaign[i] = (data$campaign[i]-2.51 ) / (2.72)
}
cov(data$age,data$balance)
cov(data$age,data$campaign)
cov(data$balance,data$campaign)
cor(data$age,data$balance)
cor(data$age,data$campaign)
cor(data$balance,data$campaign)
cov(data2$age,data2$balance) # 공분산 : 두변수가 각각 평균으로부터 변화하는 방향에 관한 기대값
data2<-read.csv("./bank.csv",header=T)
cov(data$age,data$balance)
cov(data$age,data$campaign)
cov(data$balance,data$campaign)
cor(data$age,data$balance)
cor(data$age,data$campaign)
cor(data$balance,data$campaign)
cov(data2$age,data2$balance) # 공분산 : 두변수가 각각 평균으로부터 변화하는 방향에 관한 기대값
cov(data2$age,data2$campaign)
cov(data2$balance,data2$campaign)
cor(data2$age,data2$balance) # 상관계수 : 표준화된 공분산 0이면 상관관계 X
cor(data2$age,data2$campaign)
cor(data2$balance,data2$campaign)
cor(data2$balance,data2$campaign)
cor(data$balance,data$campaign)
cov(data2$age,data2$balance) # 공분산 : 두변수가 각각 평균으로부터 변화하는 방향에 관한 기대값
cov(data2$age,data2$campaign)
cov(data2$balance,data2$campaign)
cov(data$age,data$balance)
cov(data$age,data$campaign)
cov(data$balance,data$campaign)
cov(data$age,data$balance)
cov(data$age,data$campaign)
cov(data$balance,data$campaign)
cov(data$age,data$balance)
cov(data$age,data$campaign)
cov(data$balance,data$campaign)
cor(data$age,data$balance)
cor(data$age,data$campaign)
cor(data$balance,data$campaign)
cor(data2$age,data2$balance) # 상관계수 : 표준화된 공분산 0이면 상관관계 X
cor(data2$age,data2$campaign)
cor(data2$balance,data2$campaign)
index<-createDataPartition(data$deposit,p=0.7,list=FALSE)
tr_data<-data[index,]
test_data<-data[-index,]
tr_data$deposit<-factor(tr_data$deposit)
dt<-rpart(deposit~duration+default+marital+housing.,data=tr_data,cp=0.11)
dt<-rpart(deposit~duration+default+marital+housing,data=tr_data,cp=0.11)
printcp(dt)
plotcp(dt)
dt<-rpart(deposit~duration+default+marital+housing,data=tr_data,cp=0.11)
printcp(dt)
plotcp(dt)
predict_nb <- predict(nb1, newdata = test_data, )
predict_dt<-predict(dt,newdata=test_data,type="class")
confusionMatrix(predict_nb, as.factor(test_data$deposit),positive = "yes")
confusionMatrix(predict_dt, as.factor(test_data$deposit),positive = "yes")
predict_dt<-predict(dt,newdata=test_data,type="class")
confusionMatrix(predict_dt, as.factor(test_data$deposit),positive = "yes")
help("NaiveBayes")
confusionMatrix(predict_dt, as.factor(test_data$deposit),positive = 1)
dt<-rpart(deposit~duration+default+marital+housing,data=tr_data,cp=0.11)
plotcp(dt)
printcp(dt)
dt
predict_dt<-predict(dt,newdata=test_data,type="class")
confusionMatrix(predict_dt, as.factor(test_data$deposit),positive = "yes")
index<-createDataPartition(data$deposit,p=0.7,list=FALSE)
tr_data<-data[index,]
test_data<-data[-index,]
tr_data$deposit<-factor(tr_data$deposit)
#nb1<-naiveBayes(deposit~.,data=tr_data,)
nb<-NaiveBayes(deposit~.,data=tr_data,FL=1,usekernal=T)
dt<-rpart(deposit~duration+default+marital+housing,data=tr_data,cp=0.11)
printcp(dt)
plotcp(dt)
predict_nb <- predict(nb1, newdata = test_data, )
predict_dt<-predict(dt,newdata=test_data,type="class")
confusionMatrix(predict_nb, as.factor(test_data$deposit),positive = "yes")
confusionMatrix(predict_dt, as.factor(test_data$deposit),positive = "yes")
confusionMatrix(predict_dt, test_data,positive = "yes")
predict_dt
predict_dt<-predict(dt,newdata=test_data,type="class")
predict_dt<-predict(dt,newdata=test_data,)
confusionMatrix(predict_dt, as.factor(test_data$deposit), positive = "yes")
predict_dt<-predict(dt,newdata=test_data,type="class")
confusionMatrix(predict_dt, as.factor(test_data$deposit), positive = "yes")
confusionMatrix(predict_dt, as.factor(test_data$deposit))
printPlot(dt)
plot(dt)
dt
plotcp(dt)
fancyRpartPlot(dt)
#-------------------------------------------------------------------------------------
#cor값이 가장 높은 변수 2개로 테스트 campaign previous
head(x)
#-------------------------------------------------------------------------------------
#cor값이 가장 높은 변수 2개로 테스트 campaign previous
head(x)
#-------------------------------------------------------------------------------------
#cor값이 가장 높은 변수 2개로 테스트 campaign previous
head(x)
xtest <- cbind(x[2],x[3],x[7],x[1])
y = tr_set$deposit
# optimize model
modelLookup("nb")
# optimization
model = train(xtest,
y,
'nb',
trControl=trainControl(method='cv',number=10),
tuneGrid=grid
)
model
#Model Evaluation
#Predict testing set
Predict <- predict(model,newdata = ts_set)
Predict
#Get the confusion matrix to see accuracy value and other parameter values
confusionMatrix(Predict, ts_set$deposit)
head(xtest)
#-------------------------------------------------------------------------------------
#전체다
head(x)
#-------------------------------------------------------------------------------------
#전체다
head(x)
# tidyverse 패키지 설치 (tibble 및 여러가지 함수 사용)
#install.packages("tidyverse")
library(dplyr)
# ggplot2 패키지 설치 (plot 그리기)
#install.packages("ggplot2")
library(ggplot2)
# patchwork 패키지 설치 (plot 모아서 보기)
#install.packages(("patchwork"))
library(patchwork)
# psych 패키지 설치 (describe() 함수 사용(기술 통계))
#install.packages("psych")
library(psych)
# caret 패키지 설치 (createDataPartition() 함수 사용(층화 추출), 최적화)
#install.packages("caret")
library(caret)
# rpart 패키지 설치 (decision tree)
#install.packages("rpart")
#install.packages("raprt.plot")
library(rpart)
library(rpart.plot)
# rattle 패키지 설치 (fancyRpartPlot() 함수 사용)
#install.packages("rattle")
library(rattle)
getwd()
setwd("C:/Users/cksgo/Desktop/모든것/수업자료/3학년 1학기/2022_Basic_DataScience/7주차/실습")
data <- read.csv (
file = "bank.csv",
header = TRUE
)
data <- tibble(age = data$age,
job = as.factor(data$job),
marital = as.factor(data$marital),
education = as.factor(data$education),
default = as.factor(data$default),
balance = data$balance,
housing = as.factor(data$housing),
loan = as.factor(data$loan),
contact = as.factor(data$contact),
day = as.factor(data$day),
month = as.factor(data$month),
duration = data$duration,
campaign = data$campaign,
pdays = data$pdays,
previous = data$previous,
poutcome = as.factor(data$poutcome),
deposit = as.factor(data$deposit))
data$job <- ifelse(data$job == 'unknown', NA, data$job)
table(is.na(data$job))
data <- data %>% filter(!is.na(job))
data$education <- ifelse(data$education == 'unknown', NA, data$education)
table(is.na(data$education))
data <- data %>% filter(!is.na(education))
data$contact <- ifelse(data$contact == 'unknown', NA, data$contact)
data$contact
table(is.na(data$contact))
data <- data %>% filter(!is.na(contact))
count(data)
# previous
boxplot(data$previous)$stats
data$previous <- ifelse(data$previous < 0 | data$previous > 2, NA, data$previous)
table(is.na(data$previous))
data <- data %>% filter(!is.na(previous))
# campaign
boxplot(data$campaign)$stats
data$campaign <- ifelse(data$campaign < 1 | data$campaign > 6, NA, data$campaign)
table(is.na(data$campaign))
data <- data %>% filter(!is.na(campaign))
# balance
boxplot(data$balance)$stats
data$balance <- ifelse(data$balance < -2282 | data$balance > 4256, NA, data$balance)
table(is.na(data$balance))
data <- data %>% filter(!is.na(balance))
# age
boxplot(data$age)$stats
data$age <- ifelse(data$age < 18 | data$age > 74, NA, data$age)
table(is.na(data$age))
data <- data %>% filter(!is.na(age))
# duration
boxplot(data$duration)$stats
data$duration <- ifelse(data$duration < 2 | data$duration > 1058, NA, data$duration)
table(is.na(data$duration))
data <- data %>% filter(!is.na(duration))
set.seed(1)
idx = createDataPartition(data$deposit, p = .7, list = F)
tr_set <- data[idx, ]
ts_set <- data[-idx, ]
# maxdepth 최적화 -> 8
# minsplite 최적화 -> 49
# minbucket 최적화 -> 16
# gini
fit_6 <- rpart(deposit~housing+month+duration+previous,
data = tr_set,
cp = 0.002,
maxdepth = 8,
minsplit = 49,
minbucket = 16
)
#7995
pred = predict(fit_6, ts_set, type = "class",)
print(data.frame(ts_set, pred))
confusionMatrix(ts_set$deposit, pred, positive = 'yes')
#nnet시작
#install.packages("neuralnet")
library(neuralnet)
library(nnet)
library(tidyverse)
library(rpart)
library(e1071)
library(caret)
#명목형 변수 수치형으로 변경경
#housing
data$housing <- ifelse(data$housing == 'no', 0, data$housing)
data$housing <- ifelse(data$housing == 'yes', 1, data$housing)
#month
data$month <- ifelse(data$month == 'jan', 1, data$month)
data$month <- ifelse(data$month == 'feb', 2, data$month)
data$month <- ifelse(data$month == 'mar', 3, data$month)
data$month <- ifelse(data$month == 'apr', 4, data$month)
data$month <- ifelse(data$month == 'may', 5, data$month)
data$month <- ifelse(data$month == 'jun', 6, data$month)
data$month <- ifelse(data$month == 'jul', 7, data$month)
data$month <- ifelse(data$month == 'aug', 8, data$month)
data$month <- ifelse(data$month == 'sep', 9, data$month)
data$month <- ifelse(data$month == 'oct', 10, data$month)
data$month <- ifelse(data$month == 'nov', 11, data$month)
data$month <- ifelse(data$month == 'dec', 12, data$month)
#duration,month,housing 3개 사용
head(data)
table(data$month)
deposit<- factor(data$deposit, levels = c("yes", "no"))
housing <- as.numeric(data$housing)
month<- as.numeric(data$month)
duration<- as.numeric(data$duration)
ds<- data.frame(deposit, housing, month, duration)
str(ds)
# 데이터 스케일링
preProcValues = preProcess(ds)
#The function preProcess estimates the required parameters for each operation and predict.preProcess is used to apply them to specific data sets. This function can also be interfaces when calling the train function.
ds <- predict(preProcValues, ds)
summary(ds)
set.seed(1)
indexes = createDataPartition(ds$deposit, p = .7, list = F)
tr_set = ds[indexes, ]
ts_set = ds[-indexes, ]
#결정나무모델
fit = rpart(deposit~.,
data = tr_set
)
printcp(fit)
library(rattle)
fancyRpartPlot(fit)
pred = predict(fit, ts_set, type = "class" )
print(data.frame(ts_set, pred))
confusionMatrix(pred, ts_set$deposit)
#인공신경망망
modelLookup("nnet")
tuneGrid = expand.grid(size = 16:18, decay = 10 ** (-5:-3))
trControl=trainControl(method='repeatedcv', number = 10, repeats = 2)
model = train(deposit ~.,
data = tr_set,
method = 'nnet',
maxit = 100, #반복횟수 epoch 수
metric = 'Accuracy',
trControl = trControl,
tuneLength = 3, #파라미터 조합 갯수
tuneGrid = tuneGrid
)
model
model$finalModel
#final 모델의 수렴 출력 converged ->수렴
model$finalModel$convergence
#모델평가
pred <- predict(model$finalModel, newdata = ts_set, type = "class")
pred <- factor(pred, levels = c("yes","no"))
print(data.frame(ts_set$deposit, pred))
confusionMatrix(pred, ts_set$deposit)
#install.packages("devtools")
library(devtools)
source('https://gist.githubusercontent.com/fawda123/7471137/raw/466c1474d0a505ff044412703516c34f1a4684a5/nnet_plot_update.r')
plot.nnet(model)
model
model$finalModel
#final 모델의 수렴 출력 converged ->수렴
model$finalModel$convergence
model$finalModel
data <- read.csv (
file = "bank.csv",
header = TRUE
)
# 간단한 데이터 EDA
str(data)
describe(data)
# 데이터 변환
data <- data.frame(age = data$age,
job = as.factor(data$job),
marital = as.factor(data$marital),
education = as.factor(data$education),
default = as.factor(data$default),
balance = data$balance,
housing = as.factor(data$housing),
loan = as.factor(data$loan),
contact = as.factor(data$contact),
day = as.factor(data$day),
month = as.factor(data$month),
duration = data$duration,
campaign = data$campaign,
pdays = data$pdays,
previous = data$previous,
poutcome = as.factor(data$poutcome),
deposit = as.factor(data$deposit))
# 기술통계 확인
describe(data)
# 데이터 전처리 (결측치 삭제)
# (확인결과 poutcome 변수는 결측치가 대부분을 차지하여 처리하지 않고 대신 예측변수로 사용 안하는 것으로 판단)
data$job <- ifelse(data$job == 'unknown', NA, data$job)
table(is.na(data$job))
data <- data %>% filter(!is.na(job))
data$education <- ifelse(data$education == 'unknown', NA, data$education)
table(is.na(data$education))
data <- data %>% filter(!is.na(education))
data$contact <- ifelse(data$contact == 'unknown', NA, data$contact)
table(is.na(data$contact))
data <- data %>% filter(!is.na(contact))
# previous
boxplot(data$previous)$stats
data$previous <- ifelse(data$previous < 0 | data$previous > 2, NA, data$previous)
table(is.na(data$previous))
data <- data %>% filter(!is.na(previous))
# campaign
boxplot(data$campaign)$stats
data$campaign <- ifelse(data$campaign < 1 | data$campaign > 6, NA, data$campaign)
table(is.na(data$campaign))
data <- data %>% filter(!is.na(campaign))
# balance
boxplot(data$balance)$stats
data$balance <- ifelse(data$balance < -2282 | data$balance > 4256, NA, data$balance)
table(is.na(data$balance))
data <- data %>% filter(!is.na(balance))
# age
boxplot(data$age)$stats
data$age <- ifelse(data$age < 18 | data$age > 74, NA, data$age)
table(is.na(data$age))
data <- data %>% filter(!is.na(age))
# duration
boxplot(data$duration)$stats
data$duration <- ifelse(data$duration < 2 | data$duration > 1058, NA, data$duration)
table(is.na(data$duration))
data <- data %>% filter(!is.na(duration))
# 데이터 확인 (남은 record는 5,755개 (11,162 -> 5,755 : 5,407개 record 삭제됨))
str(data)
# 수치형 변수 스케일링 및 명목형 변수 수치형으로 변환 (pdays 변수와 poutcome 변수는 사용안함)
data_numeric <- data.frame(age = data$age,
balance = data$balance,
duration = data$duration,
campaign = data$campaign,
previous = data$previous)
data_factor <- data.frame(job = as.factor(data$job),
marital = as.factor(data$marital),
education = as.factor(data$education),
default = as.factor(data$default),
housing = as.factor(data$housing),
loan = as.factor(data$loan),
contact = as.factor(data$contact),
day = as.factor(data$day),
month = as.factor(data$month))
data_target <- data.frame(deposit = as.factor(data$deposit))
preProcValues = preProcess(data_numeric)
data_numeric_scaled <- predict(preProcValues, data_numeric)
# 명목형 데이터 수치형으로 변환
dummy <- dummyVars(" ~ .", data=data_factor)
data_factor_numeric <- data.frame(predict(dummy, newdata = data_factor))
# 전처리된 데이터 통합 (pdays, poutcome 제거)
data <- cbind(data_numeric_scaled, data_factor_numeric)
data <- cbind(data, data_target)
str(data)
table(data$month.apr)
model
plot.nnet(model)
tr_set
model$finalModel
# 수치형 변수 극단값 확인 및 제거
# pdays 변수 제외 (수치형 값이면서 명목형 변수의 의미를 가지는 특정값 존재(-1))
data
set.seed(1)
indexes = createDataPartition(ds$deposit, p = .7, list = F)
tr_set = ds[indexes, ]
ts_set = ds[-indexes, ]
#epoch수를 다르게 하며 학습 곡선 그리기 decay(weight)값은 0.0001~0.001사이, 히든노드는 16~18개
testAccuracy = array(1:10)
trainAccuracy = array(1:10)
#이거 돌리지 마셈 오래걸림
tuneGrid = expand.grid(size = 16:18, decay = 10 ** (-5:-3))
trControl=trainControl(method='repeatedcv', number = 2, repeats = 1)
tuneGrid = expand.grid(size = 16:18, decay = 10 ** (-5:-3))
trControl=trainControl(method='repeatedcv', number = 10, repeats = 2)
model = train(deposit ~.,
data = tr_set,
method = 'nnet',
maxit = 100, #반복횟수 epoch 수
metric = 'Accuracy',
trControl = trControl,
tuneLength = 3, #파라미터 조합 갯수
tuneGrid = tuneGrid
)
model
model$finalModel
#weight : 1e-05, 레이어노드 17개
#final 모델의 수렴 출력 converged ->수렴
model$finalModel$convergence
#모델평가
pred <- predict(model$finalModel, newdata = ts_set, type = "class")
pred <- factor(pred, levels = c("yes","no"))
print(data.frame(ts_set$deposit, pred))
confusionMatrix(pred, ts_set$deposit)
#install.packages("devtools")
library(devtools)
source('https://gist.githubusercontent.com/fawda123/7471137/raw/466c1474d0a505ff044412703516c34f1a4684a5/nnet_plot_update.r')
plot.nnet(model)
#install.packages("devtools")
library(devtools)
source('https://gist.githubusercontent.com/fawda123/7471137/raw/466c1474d0a505ff044412703516c34f1a4684a5/nnet_plot_update.r')
plot.nnet(model)
tr_set
model$finalModel
model
plot.nnet(model)
tr_set
